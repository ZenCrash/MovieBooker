@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Linq
@using MovieBooker.API.Dto
@using MovieBooker.API.Controllers

@inject UserController userController
@inject NavigationManager navigationManager

@page "/register"

<h3>Register</h3>

<div>
    <div>
        @if (AccountRegistered)
        {
            <h3>Account created successfully!</h3>
            <h3>Redirecting in 5 seconds.</h3>
            <div class="spinner-border text-secondary" role="status">
                <span class="sr-only"></span>
            </div>
        }
        else
        {
            <EditForm Model="@_inputModel" OnValidSubmit="OnPost" OnInvalidSubmit="InvalidPost" FormName="RegisterModel">
                <DataAnnotationsValidator />
                @*Email*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@_inputModel.Email">Email: *</label>
                    <InputText class="form-control" id="@_inputModel.Email" @bind-Value="_inputModel.Email" type="email" />
                    <ValidationMessage For="@(() => _inputModel.Email)" class="text-danger" />
                </div>
                @*Password*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@_inputModel.Password">Password: *</label>
                    <InputText class="form-control" id="@_inputModel.Password" @bind-Value="@_inputModel.Password" type="password" />
                    <ValidationMessage For="@(() => _inputModel.Password)" class="text-danger" />
                </div>
                @*Confirm Password*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@_inputModel.ConfirmPassword">Confirm Password: *</label>
                    <InputText class="form-control" id="@_inputModel.ConfirmPassword" @bind-Value="@_inputModel.ConfirmPassword" type="password" />
                    <ValidationMessage For="@(() => _inputModel.ConfirmPassword)" class="text-danger" />
                </div>
                @*First Name*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@_inputModel.FirstName">First Name: *</label>
                    <InputText class="form-control" id="@_inputModel.FirstName" @bind-Value="@_inputModel.FirstName" type="text" />
                    <ValidationMessage For="@(() => _inputModel.FirstName)" class="text-danger" />
                </div>
                @*Last Name*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@_inputModel.LastName">Last Name: *</label>
                    <InputText class="form-control" id="@_inputModel.LastName" @bind-Value="@_inputModel.LastName" type="text" />
                    <ValidationMessage For="@(() => _inputModel.LastName)" class="text-danger" />
                </div>
                @*PhoneNumber*@
                <div class="form-group" style="margin:10px">
                    <label class="form-label" for="@_inputModel.PhoneNumber">Phone Number:</label>
                    <InputText class="form-control" id="@_inputModel.PhoneNumber" @bind-Value="_inputModel.PhoneNumber" type="tel" />
                    <ValidationMessage For="@(() => _inputModel.PhoneNumber)" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary" style="margin-top: 10px;">Register</button>
            </EditForm>
            <ul class="text-danger">
                @foreach (var item in errorMessages)
                {
                    <li>
                        <p>@item</p>
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    private bool AccountRegistered { get; set; } = false;
    [SupplyParameterFromForm]
    private InputModel _inputModel { get; set; } = new();
    private List<string> errorMessages { get; set; } = new();

    protected override void OnInitialized()
    {

    }

    private async Task OnPost()
    {
        //does user exist?
        var userExists = await userController.GetByEmail(_inputModel.Email);
        if (userExists != null)
        {
            string error = "Email is already in use.";
            errorMessages.Add(error);
            StateHasChanged();
            return;
        }

        IPasswordHasher<InputModel> userManager = new PasswordHasher<InputModel>();

        //create new user
        var identity = new UserDto.Edit
            {
                UserName = _inputModel.Email,
                PasswordHashed = userManager.HashPassword(_inputModel, _inputModel.Password),
                FirstName = _inputModel.FirstName,
                LastName = _inputModel.LastName,
                Email = _inputModel.Email,
                PhoneNumber = _inputModel.PhoneNumber,
            };

        await userController.Create(identity);

        AccountRegistered = true;
        StateHasChanged();
        await Task.Delay(5000);
        navigationManager.NavigateTo("/");
    }

    public async Task InvalidPost()
    {
        
    }

    //Input Model Code
    private class InputModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "First name is required.")]
        [StringLength(256, MinimumLength = 2)]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required.")]
        [StringLength(256, MinimumLength = 2)]
        public string LastName { get; set; }

        [Phone(ErrorMessage = "Invalid phone number.")]
        public string PhoneNumber { get; set; }
    }
}