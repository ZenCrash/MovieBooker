@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Linq
@using MovieBooker.API.Dto
@using MovieBooker.API.Controllers
@using System.Text.RegularExpressions;

@inject UserController userController
@inject NavigationManager navigationManager

@page "/Login"

<h3>Login</h3>

<div>
    <div class="col-3">
        <EditForm Model="@_inputModel" OnValidSubmit="OnLogin" OnInvalidSubmit="InvalidLogin" FormName="Login">
            <DataAnnotationsValidator />
            @*Email*@
            <div class="form-group" style="margin:10px">
                <label class="form-label" for="@_inputModel.Username">Email, Username: *</label>
                <InputText class="form-control" id="@_inputModel.Username" @bind-Value="_inputModel.Username" type="email" />
                <ValidationMessage For="@(() => _inputModel.Username)" class="text-danger" />
            </div>
            @*Password*@
            <div class="form-group" style="margin:10px">
                <label class="form-label" for="@_inputModel.Password">Password: *</label>
                <InputText class="form-control" id="@_inputModel.Password" @bind-Value="@_inputModel.Password" type="password" />
                <ValidationMessage For="@(() => _inputModel.Password)" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary" style="margin-top: 10px;">Login</button>
        </EditForm>
        <ul class="text-danger">
            @foreach (var item in errorMessages)
            {
                <li>
                    <p>@item</p>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private readonly SignInManager<UserDto.Display> _signInManager;

    protected override void OnInitialized()
    {

    }

    [SupplyParameterFromForm]
    private InputModel _inputModel { get; set; } = new();
    private List<string> errorMessages { get; set; } = new();

    private async Task OnLogin()
    {
        errorMessages.Clear();

        var user = await userController.GetByUsername(_inputModel.Username);
        if (user == null)
        {
            // errorMessages.Add("Username or password was incorrect");
            errorMessages.Add("No users by that Username exists, or the local database is down");
            StateHasChanged();
            return;
        }

        IPasswordHasher<InputModel> userManager = new PasswordHasher<InputModel>();
        string hashedPassword = userManager.HashPassword(_inputModel, _inputModel.Password);

        if (user == null || hashedPassword !=)

        var result = await _signInManager.PasswordSignInAsync(
            _inputModel.Username,
            _inputModel.Password,
            false,
            lockoutOnFailure: false);

        if (result.Succeeded)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            errorMessages.Add("Username or password was incorrect");
        }
    }
    private async Task InvalidLogin()
    {

    }

    //Input Model Code
    private class InputModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }
    }
}
