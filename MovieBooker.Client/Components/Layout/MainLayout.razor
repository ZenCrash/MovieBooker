@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MovieBooker.DataAccess.Model
@using Microsoft.AspNetCore.Identity

@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

<CascadingAuthenticationState>
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <AuthorizeView>
                    <Authorized>
                        <span aria-hidden="true">Welcome, @email</span>
                        <button class="btn btn-link" @onclick="OnLogout">Logout</button>
                    </Authorized>
                    <NotAuthorized>
                        <NavLink class="nav-link" href="Login">
                            <span aria-hidden="true">Login</span>
                        </NavLink>
                        <NavLink class="nav-link" href="Register">
                            <span aria-hidden="true">Register</span>
                        </NavLink>
                    </NotAuthorized>
                </AuthorizeView>
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingAuthenticationState>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private string email;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
        }
    }

    private async Task OnLogout()
    {
        await SignInManager.SignOutAsync(); // Sign out the user
    }
}